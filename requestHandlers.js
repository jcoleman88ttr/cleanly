var exec = require("child_process").exec;var fs = require("fs");//Load Viewsvar homeView = fs.readFileSync('views/index.html');var loginView = fs.readFileSync('views/login.html');var menuView = fs.readFileSync('views/menu.html');var scheduleView = fs.readFileSync('views/schedule.html');var searchView = fs.readFileSync('views/search.html');var confirmationView = fs.readFileSync('views/confirmation.html');var registrationView = fs.readFileSync('views/register.html');var orderView = fs.readFileSync('views/orders.html');var mainView = fs.readFileSync('views/main.html');//Begin View Rendering Functionsfunction form(response, postData, db, params) {	console.log("Request handler 'Login Form' was called.");	response.writeHead(200, {"Content-Type": "text/html"});	response.end(homeView);}function login(response, postData, db, params) {	console.log("Request handler 'Login' was called.");	response.writeHead(200, {"Content-Type": "text/html"});	response.end(loginView);}function validate(response, postData, db, params) {	console.log("Request handler 'Menu' was called.");}function menu(response, postData, db, params) {	console.log("Request handler 'Menu' was called.");	response.writeHead(200, {"Content-Type": "text/html"});	response.end(menuView);}	function schedule(response, postData, db, params) {	console.log("Request handler 'Schedule' was called.");	response.writeHead(200, {"Content-Type": "text/html"});	response.end(scheduleView);}function broadcast(response, postData, db, params) {	console.log("Request handler 'Broadcast' was called.");	var time = params['time'];	var cleaner = 0;	var user = params['uid'];	db.query('INSERT INTO orders (cleanerid,userid,start) VALUES ('+cleaner+','+user+','+time+')', function (error, rows, fields) {         response.writeHead(200, {			'Content-Type': 'text/plain'         });         // Send data as JSON string.         // Rows variable holds the result of the query.    });	response.end(searchView);}function confirm(response, postData, db, params) {	console.log("Request handler 'Confirmation' was called.");	response.writeHead(200, {"Content-Type": "text/html"});	response.end(confirmationView);}function register(response, postData, db, params) {	console.log("Request handler 'Register' was called.");	response.writeHead(200, {"Content-Type": "text/html"});	response.end(registrationView);}function orders(response, postData, db, params) {	console.log("Request handler 'Display Order' was called.");	response.writeHead(200, {"Content-Type": "text/html"});	response.end(orderView);}function main(response, postData, db, params) {	console.log("Request handler 'Main' was called.");	response.writeHead(200, {"Content-Type": "text/html"});	response.end(mainView);}//End View Rendering Function//Vendor Functionsfunction changeStatus(response, postData, db, params) {	console.log("Request handler 'Change Cleaner Status' was called");	var id = params['id'];	var status = params['status'];	db.query('UPDATE cleaners SET status='+status+' WHERE id='+id, function (error, rows, fields) {         response.writeHead(200, {			'Content-Type': 'text/plain'         });		 console.log("Cleaner ID#"+id+" has checked in.");         response.end(JSON.stringify(rows));    });}function acceptOrder(response, postData, db, params) {}function viewOrders(response, postData, db, params) {}//Function to Return Individual User Based on IDfunction checkUser(response, postData, db, params) {	console.log("Request handler 'Check User' was called.");	var phone = params['phone'];	var pwd = params['pwd'];	db.query("SELECT * FROM users WHERE (phone='"+phone+"') AND (password='"+pwd+"')", function (error, rows, fields) {         response.writeHead(200, {			'Content-Type': 'text/plain'         });         // Send data as JSON string.         // Rows variable holds the result of the query.         response.end(JSON.stringify(rows.length));    });}function getUser(response, postData, db, params) {	console.log("Request handler 'read' was called.");	var id = params['id'];	db.query('SELECT * FROM users WHERE id='+id, function (error, rows, fields) {         response.writeHead(200, {			'Content-Type': 'text/plain'         });         // Send data as JSON string.         // Rows variable holds the result of the query.         response.end(JSON.stringify(rows));    });}//Function to Return List of Usersfunction getUsers(response, postData, db, params) {	console.log("Request handler 'Get User' was called.");	db.query('SELECT * FROM users', function (error, rows, fields) {         response.writeHead(200, {			'Content-Type': 'text/plain'         });         // Send data as JSON string.         // Rows variable holds the result of the query.         response.end(JSON.stringify(rows));    });}//Function to Return List of Cleaners Based of Schedule Parametersfunction getCleaners(response, postData, db, params) {	console.log("Request handler 'Get Cleaners' was called.");	var zip = params['zip'];	db.query('SELECT * FROM cleaners WHERE (zip='+zip+') AND (status=1) LIMIT 5', function (error, rows, fields) {         response.writeHead(200, {			'Content-Type': 'text/plain'         });         // Send data as JSON string.         // Rows variable holds the result of the query.		 console.log("Request handler 'Get Cleaners' was called.");         response.end(JSON.stringify(rows));    });}//Order Functions - CRUDfunction addOrder(response, postData, db, params) {	console.log("Request handler 'Add Order' was called.");	var cleaner = params['cid'];	var user = params['uid'];	db.query('INSERT INTO orders (cleanerid,userid) VALUES ('+cleaner+','+user+')', function (error, rows, fields) {         response.writeHead(200, {			'Content-Type': 'text/plain'         });		 console.log("Order Created Between Cleaner: #"+cleaner+" and User: #"+user);         // Send data as JSON string.         // Rows variable holds the result of the query.         response.end(JSON.stringify(rows['insertId']));    });}function getOrder(response, postData, db, params) {	console.log("Request handler 'Get Order' was called.");	var field = params['field'];	var value = params['value'];	db.query('SELECT * FROM orders WHERE '+field+'='+value, function (error, rows, fields) {         response.writeHead(200, {			'Content-Type': 'text/plain'         });		 console.log("Order requested.");         // Send data as JSON string.         // Rows variable holds the result of the query.         response.end(JSON.stringify(rows));    });}function getOrders(response, postData, db, params) {	console.log("Request handler 'Get All Orders' was called.");	db.query('SELECT * FROM orders', function (error, rows, fields) {         response.writeHead(200, {			'Content-Type': 'text/plain'         });         response.end(JSON.stringify(rows));    });}function changeOrder(response, postData, db, params) {	console.log("Request handler 'Change Order' was called");	var id = params['id'];	var field = params['field'];	var value = params['value'];	db.query('UPDATE orders SET '+field+'='+value+' WHERE id='+id, function (error, rows, fields) {         response.writeHead(200, {			'Content-Type': 'text/plain'         });		 console.log("Change: "+field+" = '"+value+"' Has Been Made to Order #"+id);         response.end(JSON.stringify(rows));    });}function removeOrder(response, postData, db, params) {	console.log("Request handler 'Delete Order' was called.");	var id= params['id'];	db.query('DELETE FROM orders WHERE id='+id, function (error, rows, fields) {         response.writeHead(200, {			'Content-Type': 'text/plain'         });		 console.log("Order #"+id+" wsssas Deleted.");         // Send data as JSON string.         // Rows variable holds the result of the query.         response.end(JSON.stringify(rows['affectedRows']));    });}//Export Functions for Use in index.js fileexports.form = form;exports.login = login;exports.menu = menu;exports.schedule = schedule;exports.broadcast = broadcast;exports.confirm = confirm;exports.register = register;//Export Cleaner Functionsexports.changeStatus = changeStatus;exports.getCleaners = getCleaners;exports.getUsers = getUsers;exports.checkUser = checkUser;//Export Order Functionsexports.addOrder = addOrder;exports.getOrder = getOrder;exports.getOrders = getOrders;exports.changeOrder = changeOrder;exports.removeOrder = removeOrder;//Basic Export Functionsexports.main = main;