var exec = require("child_process").exec;function start(response) {	console.log("Request handler 'start' was called.");	exec("ls -lah", function (error, stdout, stderr) {		response.writeHead(200, {"Content-Type": "text/plain"});		response.write(stdout);		response.end();	});}function upload(response) {	console.log("Request handler 'upload' was called.");	response.writeHead(200, {"Content-Type": "text/plain"});	response.write("Hello Upload");	response.end();}function create(response, postData) {	console.log("Request handler 'create' was called.");	}	//Order Functions - CRUDfunction createorder(response, postData, db, params) {	console.log("Request handler 'Create Order' was called.");	var cleaner = params['cid'];	var user = params['uid'];		db.query('INSERT INTO orders (cleanerid,userid) VALUES ('+cleaner+','+user+')', function (error, rows, fields) {         response.writeHead(200, {			'Content-Type': 'text/plain'         });		 console.log("Order Created Between Cleaner: #"+cleaner+" and User: #"+user);         // Send data as JSON string.         // Rows variable holds the result of the query.         response.end(JSON.stringify(rows));    });}function deleteorder(response, postData, db, params) {	console.log("Request handler 'Delete Order' was called.");	db.query('DELETE * FROM orders WHERE id=', function (error, rows, fields) {         response.writeHead(200, {			'Content-Type': 'text/plain'         });		 console.log("Order #"+id+" Deleted.");         // Send data as JSON string.         // Rows variable holds the result of the query.         response.end(JSON.stringify(rows));    });}function updateorder(response, postData, db) {	console.log("Request handler 'Update Order' was called.");	db.query('DELETE * FROM orders WHERE id=', function (error, rows, fields) {         response.writeHead(200, {			'Content-Type': 'text/plain'         });         // Send data as JSON string.         // Rows variable holds the result of the query.         response.end(JSON.stringify(rows));    });}function order(response, postData, db) {	console.log("Request handler 'Order' was called.");	db.query('SELECT * FROM orders WHERE id=1', function (error, rows, fields) {         response.writeHead(200, {			'Content-Type': 'text/plain'         });         // Send data as JSON string.         // Rows variable holds the result of the query.         response.end(JSON.stringify(rows));    });}function orders(response, postData, db) {	console.log("Request handler 'read' was called.");	db.query('SELECT * FROM orders', function (error, rows, fields) {         response.writeHead(200, {			'Content-Type': 'text/plain'         });         // Send data as JSON string.         // Rows variable holds the result of the query.         response.end(JSON.stringify(rows));    });}function readall(response, postData, db) {	console.log("Request handler 'read' was called.");	db.query('SELECT * FROM users', function (error, rows, fields) {         response.writeHead(200, {			'Content-Type': 'text/plain'         });         // Send data as JSON string.         // Rows variable holds the result of the query.         response.end(JSON.stringify(rows));    });}function read(response, postData, db) {	console.log("Request handler 'read' was called.");	db.query('SELECT * FROM users WHERE id=1', function (error, rows, fields) {         response.writeHead(200, {			'Content-Type': 'text/plain'         });         // Send data as JSON string.         // Rows variable holds the result of the query.         response.end(JSON.stringify(rows));    });}function update(response) {	console.log("Request handler 'update' was called.");}function destroy(response) {	console.log("Request handler 'destroy' was called.");}function main(response) {	console.log("Request handler 'main' was called.");}//Export Functions for Use in index.js fileexports.start = start;exports.upload = upload;exports.create = create;exports.read = read;exports.readall = readall;//Export Order Functionsexports.createorder = createorder;exports.deleteorder = deleteorder;exports.updateorder = updateorder;exports.order = order;exports.orders = orders;//Basic Export Functionsexports.update = update;exports.destroy = destroy;exports.main = main;